name: Staging; Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: false
        default: 'main'

env:
  IMAGE_NAME: 'tycho-orderbook-web'

permissions:
  id-token: write
  contents: read


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Generate a token
        id: generate-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Install git
        run: sudo apt update && sudo apt install -y git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ steps.generate-token.outputs.token }}

      - name: Assume role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.role_to_assume }}"
          audience: sts.amazonaws.com
          aws-region: "${{ secrets.aws_region }}"

      - name: Login in ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - name: Check if image already exists
        id: check-image
        shell: bash
        run: |
          IMAGE="${{ env.IMAGE_NAME }}:${{ github.sha }}"

          # Try to pull the image from the new repository
          if aws ecr describe-images --registry-id ${{ secrets.domain_owner }} --repository-name ${{ env.IMAGE_NAME }} --image-ids imageTag=${{ github.sha }} 2>/dev/null; then
            echo "Image $IMAGE already exists in the repository"
            echo "skip_remaining_steps=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Image $IMAGE not found, proceeding with build"
            echo "skip_remaining_steps=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: ${{ steps.check-image.outputs.skip_remaining_steps != 'true' }}
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

      - name: Build and push docker image with docker
        if: ${{ steps.check-image.outputs.skip_remaining_steps != 'true' }}
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: .
          push: true
          tags: ${{ secrets.repository_url }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: back/ops/Dockerfile
          build-args: |
            PROGRAM=stream
            BUILD_TYPE=release
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Add image info to workflow summary
        run: |
          if [[ "${{ steps.check-image.outputs.skip_remaining_steps }}" == "true" ]]; then
            echo "### Didn't push Docker image because it is already present in the repo" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Built and pushed Docker image" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  deploy-to-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Generate a token
        id: generate-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.app_id }}
          private_key: ${{ secrets.app_private_key }}

      - name: Install git
        run: sudo apt update && sudo apt install -y git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ steps.generate-token.outputs.token }}

      - name: Install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
          arch: amd64
          rootdir: ""
          workdir: ""

      - name: Install helm3
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Assume role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "${{ secrets.role_to_assume }}"
          audience: sts.amazonaws.com
          aws-region: "${{ secrets.aws_region }}"

      - name: Setup kubeconfig
        run: aws eks update-kubeconfig --name "${{ secrets.eks_cluster_name }}" --region "${{ secrets.aws_region }}"

      - name: Upgrade or Install helm release
        run: |
          helm upgrade --install -n "${{ secrets.eks_namespace }}" tycho-orderbook-stream .helm/tycho-orderbook-stream \
            -f .helm/tycho-orderbook-stream/values.yaml \
            --set image.repository=${{ secrets.repository_url }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set externalSecrets.data=${{ secrets.external_secret_data }} \
            --set externalSecrets.secretstore=${{ secrets.external_secret_secretstore }} \
            --set 'ingress.hosts[0].host'=${{ secrets.host_url }}
